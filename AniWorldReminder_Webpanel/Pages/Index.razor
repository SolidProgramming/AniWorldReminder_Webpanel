@attribute [Route(Routes.Index)]
@inject IApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Suche deine lieblings Serien</PageTitle>

<EditForm Model="@SeriesSearch" OnValidSubmit="@(() => SearchSeries())">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <HxInputText Label="Serien Name" @bind-Value="@SeriesSearch.SeriesName" Placeholder="Jujutsu Kaisen" />
            </div>
            <div class="col-md-2" style="margin-top: 26px;">
                <HxSubmit Color="ThemeColor.Primary" CssClass="w-100" Spinner="Loading" Enabled="@(!Loading)">Serie suchen</HxSubmit>
            </div>
        </div>
        @if (SearchResults is not null && SearchResults.Any())
        {
            <SeriesSearchResultsComponent SearchResults="@SearchResults"></SeriesSearchResultsComponent>
        }
    </div>
</EditForm>
@code {
    private bool Loading { get; set; }

    private SeriesSearchModel SeriesSearch = new();
    private List<SearchResultModel>? SearchResults;

    private async Task SearchSeries()
    {
        if (string.IsNullOrWhiteSpace(SeriesSearch.SeriesName))
            return;

        Loading = true;
        StateHasChanged();

        List<SearchResultModel>? searchResults = await ApiService.GetAsync<List<SearchResultModel>?>("getSeries",
                                                   new() {
                                                        { "seriesName", SeriesSearch.SeriesName.ToLower() },
                                                        { "mediaType", MediaType.Series.ToString() }
                                                                                   });

        Loading = false;
        StateHasChanged();

        if (searchResults is null || !searchResults.Any())
            return;

        SearchResults = searchResults;
        StateHasChanged();
    }
}
