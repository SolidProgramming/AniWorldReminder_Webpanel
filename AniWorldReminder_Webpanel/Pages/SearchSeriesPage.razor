@attribute [Route(Routes.Search)]
@attribute [Route(Routes.Search + "/{SeriesSearchName}")]
@inject IApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Reminder hinzufügen</PageTitle>

<EditForm Model="@Reminder" OnValidSubmit="@(() => SearchSeries())">
    <DataAnnotationsValidator />
    <div class="container">
        <h3>Reminder hinzufügen</h3>
        <div class="row mt-5">
            <div class="col-md-6">
                <HxInputText Label="Serien Name" @bind-Value="@Reminder.SeriesName" Placeholder="Jujutsu Kaisen" />
            </div>
            <div class="col-md-2" style="margin-top: 26px;">
                <HxSubmit Color="ThemeColor.Primary" CssClass="w-100" Spinner="Loading" Enabled="@(!Loading)">Serie suchen</HxSubmit>
            </div>
        </div>
        @if (SearchResults is not null && SearchResults.Any())
        {
            <SeriesSearchResultsComponent SearchResults="@SearchResults"></SeriesSearchResultsComponent>
        }
    </div>
</EditForm>
@code {    

    [Parameter]
    public string? SeriesSearchName { get; set; }

    private bool Loading { get; set; }

    private ReminderModel Reminder = new();
    private List<SearchResultModel>? SearchResults;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(SeriesSearchName))
        {
            Reminder.SeriesName = SeriesSearchName;
            await SearchSeries();
        }
    }

    private async Task SearchSeries()
    {
        Loading = true;
        StateHasChanged();

        List<SearchResultModel>? searchResults = await ApiService.GetAsync<List<SearchResultModel>?>("getSeries", new() { { "seriesName", Reminder.SeriesName } });

        Loading = false;
        StateHasChanged();

        if (searchResults is null || !searchResults.Any())
            return;

        SearchResults = searchResults;
        StateHasChanged();
    }
}
