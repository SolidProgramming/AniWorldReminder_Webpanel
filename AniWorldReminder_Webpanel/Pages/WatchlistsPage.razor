@attribute [Route(Routes.Watchlists)]
@attribute [Route(Routes.Watchlists + "/{WatchlistId}")]
@inject IHxMessengerService ToastService
@inject IApiService ApiService
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime


<PageTitle>Verwalte deine Watchlists</PageTitle>

@if (Loading)
{
    <div class="position-absolute top-50 start-50 translate-middle">
        <div class="d-flex align-items-center justify-content-center text-secondary">
            <HxSpinner Size="SpinnerSize.Regular"></HxSpinner>
            <span class="d-none d-sm-block ps-3 fs-5">Watchlist Daten abrufen...</span>
        </div>
    </div>
}

@if (watchlists is not null && watchlists.Count > 0)
{
    @foreach (WatchlistModel watchlist in watchlists)
    {
        <div class="p-2 border rounded">
            <div class="text-center">
                <h4>
                    @watchlist.Name
                    <HxBadge Color="ThemeColor.Success">@watchlist.Series.Count</HxBadge>
                    <HxButton OnClick="@(() => CopyShareLink(watchlist.Ident))" CssClass="mb-1" Size="ButtonSize.Small" Icon="BootstrapIcon.ShareFill" Color="ThemeColor.Dark"></HxButton>
                </h4>
            </div>
            <div class="row justify-content-center">
                @foreach (SeriesModel series in watchlist.Series)
                {
                    <HxCard ImageAlt=""
                    ImageSrc="@series.CoverArtUrl"
                    ImageHeight="330"
                    style="width: 245px;"
                    CssClass="mt-3 mx-2 px-2 rounded glass border-0"
                    HeaderCssClass="bg-transparent border border-0 p-0 m-0"
                    FooterCssClass="border-0 bg-transparent mb-2">
                        <HeaderTemplate>
                            <div class="pt-2 pb-1" />
                        </HeaderTemplate>
                        <BodyTemplate>
                            <HxCardTitle CssClass="text-center">@series.Name</HxCardTitle>
                            <HxCardText CssClass="mt-2 text-center">
                                <div class="pt-3">
                                    <span class="d-block">Staffeln: <b>@series.SeasonCount</b></span>
                                    <span class="d-block">Episoden: <b>@series.EpisodeCount</b></span>
                                </div>
                            </HxCardText>
                        </BodyTemplate>
                        <FooterTemplate>
                            <HxButton Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Warning" Outline="true" Icon="BootstrapIcon.XCircleFill" CssClass="w-100 mt-2">Entfernen</HxButton>
                        </FooterTemplate>
                    </HxCard>
                }
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string? WatchlistId { get; set; }

    private bool Loading { get; set; }

    List<WatchlistModel>? watchlists;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Loading = true;
            StateHasChanged();

            watchlists = await ApiService.GetAsync<List<WatchlistModel>?>("getUserWatchlists");

            var grouped = watchlists.GroupBy(_ => _.Ident);

            Loading = false;
            StateHasChanged();
        }
    }

    private async Task CopyShareLink(string link)
    {
        link = $"{NavigationManager.BaseUri}{Routes.Watchlists.TrimStart('/')}/{link}";

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", link);

        ToastService.AddMessage("Link wurde in die Zwischenablage kopiert!", MessageType.Secondary);
    }
}
