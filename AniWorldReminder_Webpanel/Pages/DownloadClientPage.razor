@attribute [Route(Routes.CreateDownloader)]
@inject IBlazorDownloadFileService BlazorDownloadFileService
@using System.IO.Compression
@using System.Text
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IAuthenticationService AuthService
@inject IHxMessengerService ToastService

<PageTitle>Downloader erstellen</PageTitle>

<div class="container">
    <div class="row mt-2">
        <HxButton OnClick="CreateDownloaderFiles" Color="ThemeColor.Success" Icon="BootstrapIcon.Check" CssClass="w-100">Downloader erstellen</HxButton>
    </div>
</div>

@code {
    private string? DownloadPath { get; set; }

    private async Task CreateDownloaderFiles()
    {        
        string folderName = Guid.NewGuid().ToString();
        string rootPath;

        if (Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true")
        {
            rootPath = @"/app/wwwroot";
        }
        else
        {
            rootPath = @".\wwwroot";
        }

        string tempFolderPath = Path.Combine(rootPath, "binaries", folderName);
        string tempFileNameZip = "AutoDLClient.zip";
        string tempFileNameSettings = "settings.json";
        string defaultClientFilePath = Path.Combine(rootPath, "binaries", "DefaultAutoDLClient.zip");
        string fileDownloadUrl = Path.Combine("binaries", folderName, tempFileNameZip);

        string tempFileZip = Path.Combine(tempFolderPath, tempFileNameZip);

        if (!Directory.Exists(tempFolderPath))
        {
            Directory.CreateDirectory(tempFolderPath);
        }

        await Task.Run(async () =>
        {
            try
            {
                File.Copy(defaultClientFilePath, tempFileZip);

                string tempFileSettings;

                using (ZipArchive archive = ZipFile.Open(tempFileZip, ZipArchiveMode.Update))
                {
                    AutoDLClientSettingsModel settings = new()
                        {
                            ApiUrl = "https://api.proxymov.xyz",
                            DownloadPath = DownloadPath
                        };

                    settings.ApiKey = await AuthService.GetAPIKey();

                    tempFileSettings = Path.Combine(tempFolderPath, tempFileNameSettings);

                    File.WriteAllText(tempFileSettings, System.Text.Json.JsonSerializer.Serialize(settings));

                    archive.CreateEntryFromFile(tempFileSettings, "settings.json");
                }

                File.Delete(tempFileSettings);
            }
            catch (Exception)
            {
                ToastService.AddMessage("Beim erstellen des Clients ist ein Fehler aufgetreten!", MessageType.Error);
            }
        });

        await JS.InvokeVoidAsync("triggerFileDownload", tempFileNameZip, fileDownloadUrl);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(Routes.Index);
    }

}
