@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject IApiService ApiService
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row mb-5">
        <EditForm Model="@Reminder" OnValidSubmit="@(() => SearchSeriesDashboard())">
            <HxInputText Label="Serien Name" @bind-Value="@SearchSeriesName" Placeholder="Jujutsu Kaisen" />
            <HxSubmit Color="ThemeColor.Primary" CssClass="w-100" Spinner="Loading" Enabled="@(!Loading)">Reminder suchen</HxSubmit>
        </EditForm>
    </div>
    <h3 class="d-inline">Dashboard - </h3><h5 class="d-inline">Reminder</h5>
    @if (UserSeries is not null)
    {
        <HxBadge CssClass="mx-2" Color="ThemeColor.Success">@(UserSeries.Count)x</HxBadge>
    }    
    <div class="row">
        @if (UserSeries is not null)
        {
            foreach (SeriesModel series in UserSeries)
            {
                <HxCard ImageAlt=""
                        ImageSrc="@series.CoverArtUrl"
                        ImageHeight="330"
                        ImageWidth="220"
                        style="width: 256px;"
                        CssClass="pt-2 mt-4 mx-2 rounded">
                    <BodyTemplate>
                        <HxCardTitle>@series.Name</HxCardTitle>
                            <HxCardSubtitle>
                                <HxButton OnClick="@(() => NavigateToDetail(series.Name))" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Primary" Icon="BootstrapIcon.Forward" CssClass="w-100 mt-2">Anzeigen</HxButton>
                                <HxButton OnClick="@(() => RemoveReminder(series.Name))" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Warning" Outline="true" Icon="BootstrapIcon.XCircleFill" CssClass="w-100 mt-2">Entfernen</HxButton>
                            </HxCardSubtitle>
                        </BodyTemplate>
                    </HxCard>
            }
        }
        else
        {
            <div class="text-center">
                <HxSpinner Size="SpinnerSize.Regular"></HxSpinner>
            </div>
        }
    </div>
</div>

@code {
    private List<SeriesModel>? UserSeries { get; set; }

    private bool Loading { get; set; }

    private ReminderModel Reminder = new();

    private string SearchSeriesName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await AuthService.Initialize();

        if (firstRender)
        {
            Loading = true;
            StateHasChanged();
            UserSeries = await ApiService.GetAsync<List<SeriesModel>?>("getAllUserSeries");
            Loading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RemoveReminder(string seriesName)
    {
        ToastService.Clear();
        Loading = true;
        StateHasChanged();

        bool deleteSuccess = await ApiService.GetAsync<bool>("removeReminder", new() { { "seriesName", seriesName } });

        if (deleteSuccess)
        {
            UserSeries?.RemoveAll(_ => _.Name == seriesName);
            ToastService.AddInformation("Erfolg", $"Dein Reminder für {seriesName} wurde gelöscht!");
        }
        else
        {
            ToastService.AddError("Fehler", $"Beim löschen des Reminders für {seriesName} ist ein Fehler aufgetreten und konnte nicht gelöscht werden!");
        }

        Loading = false;
        StateHasChanged();
    }

    private void NavigateToDetail(string seriesName)
    {
        NavigationManager.NavigateTo(Routes.SeriesDetail + $"/{seriesName}?referer={Routes.Dashboard}");
    }

    private async Task SearchSeriesDashboard()
    {
        if (string.IsNullOrEmpty(SearchSeriesName))
        {
            Loading = true;
            StateHasChanged();

            UserSeries = await ApiService.GetAsync<List<SeriesModel>?>("getAllUserSeries");

            Loading = false;
            StateHasChanged();
            return;
        }

        List<SeriesModel>? searchResults = UserSeries.Where(_ => _.Name.ToLower().Contains(SearchSeriesName.ToLower())).ToList();

        UserSeries = searchResults;
        StateHasChanged();
    }
}


