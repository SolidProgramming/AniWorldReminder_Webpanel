@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject IApiService ApiService
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row mb-5">
        <EditForm Model="@Reminder" OnValidSubmit="@(() => SearchSeriesDashboard())">
            <HxInputText Label="Serien Name" @bind-Value="@SearchSeriesName" Placeholder="Jujutsu Kaisen" />
            <HxSubmit Color="ThemeColor.Primary" CssClass="w-100" Spinner="Loading" Enabled="@(!Loading)">Serie suchen</HxSubmit>
        </EditForm>
    </div>
    <h3 class="d-inline">Dashboard</h3>
    @if (UserSeries is not null)
    {
        <HxBadge CssClass="mx-3" Color="ThemeColor.Success">@(UserSeries.Count)x</HxBadge>
    }
    <div class="row justify-content-center">
        @if (UserSeries is not null)
        {
            foreach (SeriesModel series in UserSeries)
            {
                <HxCard ImageAlt=""
                        ImageSrc="@series.CoverArtBase64"
                        ImageHeight="330"
                        style="width: 245px;"
                        CssClass="mt-3 mx-2 px-2 rounded"
                        HeaderCssClass="bg-transparent border border-0">
                    <HeaderTemplate>
                        @switch (series.StreamingPortal)
                        {
                            case StreamingPortal.AniWorld:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>AniWorld</div>
                                break;
                            case StreamingPortal.STO:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>S.TO</div>
                                break;
                            default:
                                break;
                        }
                    </HeaderTemplate>
                    <BodyTemplate>
                        <HxCardTitle>@series.Name</HxCardTitle>
                        <HxCardSubtitle>
                            <HxButton OnClick="@(() => NavigateToDetail(series.Path))" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Primary" Icon="BootstrapIcon.Forward" CssClass="w-100 mt-2">Anzeigen</HxButton>
                            @if (!series.IsSearchResult)
                            {
                                <HxButton OnClick="@(() => RemoveReminder(series.Path))" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Warning" Outline="true" Icon="BootstrapIcon.XCircleFill" CssClass="w-100 mt-2">Entfernen</HxButton>
                            }
                        </HxCardSubtitle>
                    </BodyTemplate>
                </HxCard>
            }
        }
        else
        {
            <div class="text-center">
                <HxSpinner Size="SpinnerSize.Regular"></HxSpinner>
            </div>
        }
    </div>
</div>

@code {
    private List<SeriesModel>? UserSeries { get; set; }

    private bool Loading { get; set; }

    private ReminderModel Reminder = new();

    private string SearchSeriesName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await AuthService.Initialize();

        if (firstRender)
        {
            Loading = true;
            StateHasChanged();
            UserSeries = await ApiService.GetAsync<List<SeriesModel>?>("getAllUserSeries");
            Loading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RemoveReminder(string seriesPath)
    {
        ToastService.Clear();
        Loading = true;
        StateHasChanged();

        bool deleteSuccess = await ApiService.GetAsync<bool>("removeReminder", new() { { "seriesPath", seriesPath } });

        if (deleteSuccess)
        {
            UserSeries?.RemoveAll(_ => _.Path == seriesPath);
            ToastService.AddInformation("Erfolg", $"Dein Reminder wurde gelöscht!");
        }
        else
        {
            ToastService.AddError("Fehler", $"Beim löschen des Reminders ist ein Fehler aufgetreten und konnte nicht gelöscht werden!");
        }

        Loading = false;
        StateHasChanged();
    }

    private void NavigateToDetail(string seriesName)
    {
        NavigationManager.NavigateTo(Routes.SeriesDetail + $"{seriesName}?referer={Routes.Dashboard}");
    }

    private async Task SearchSeriesDashboard()
    {
        List<SeriesModel> allResults = new();

        if (!string.IsNullOrEmpty(SearchSeriesName))
        {
            allResults.AddRange(UserSeries.Where(_ => _.Name.ToLower().Contains(SearchSeriesName.ToLower())).ToList());
        }

        UserSeries?.Clear();

        if (string.IsNullOrEmpty(SearchSeriesName))
        {
            Loading = true;
            StateHasChanged();

            UserSeries = await ApiService.GetAsync<List<SeriesModel>?>("getAllUserSeries");

            Loading = false;
            StateHasChanged();
            return;
        }

        allResults.AddRange(UserSeries.Where(_ => _.Name.ToLower().Contains(SearchSeriesName.ToLower())).ToList());

        Loading = true;
        StateHasChanged();

        List<SearchResultModel>? apiSearchResults = await ApiService.GetAsync<List<SearchResultModel>?>("getSeries", new() { { "seriesName", SearchSeriesName.ToLower() } });

        foreach (SearchResultModel searchResult in apiSearchResults.Where(_ => !allResults.Any(x => x.Path == _.Path)))
        {
            SeriesModel series = new()
                {
                    Name = searchResult.Title,
                    CoverArtUrl = searchResult.CoverArtUrl,
                    IsSearchResult = true,
                    Link = searchResult.Link,
                    Path = searchResult.Path,
                    CoverArtBase64 = searchResult.CoverArtBase64
                };

            allResults.Add(series);
        }

        UserSeries = allResults;

        Loading = false;
        StateHasChanged();
    }
}


