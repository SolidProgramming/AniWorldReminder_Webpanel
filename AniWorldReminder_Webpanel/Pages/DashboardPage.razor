@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject IApiService ApiService
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Dashboard</PageTitle>
<div class="container">
    <EditForm Model="@Reminder" OnValidSubmit="@(() => SearchSeriesDashboard())">
        <div class="row">
            <div class="col-8">
                <HxInputText Label="Serien Name" @bind-Value="@SearchSeriesName" Placeholder="Jujutsu Kaisen" />
            </div>
            <div class="col-4 d-flex align-items-center">
                <div class="mt-4">
                    <input id="chbSearchSeries" type="checkbox" class="form-check-input" @bind-value=SearchSeries checked=SearchSeries />
                    <label for="chbSearchSeries" class="ps-1">Serien</label>
                    <input id="chbSearchFilms" type="checkbox" class="form-check-input ms-2" @bind-value=SearchFilms checked=SearchFilms />
                    <label for="chbSearchFilms" class="ps-1">Filme</label>
                </div>
            </div>
        </div>
        <HxSubmit Color="ThemeColor.Primary" CssClass="w-100 mb-5" Spinner="Loading" Enabled="@(!Loading)">Serie suchen</HxSubmit>
    </EditForm>

    @if (UserSeries is not null && !Loading)
    {
        <div class="container">
            <div class="row">
                <div class="col align-self-start text-start">
                    <h3 class="d-inline">Dashboard</h3>
                    <HxBadge CssClass="mx-3" Color="ThemeColor.Success">@(UserSeries.Count)x</HxBadge>
                </div>
                <div class="col align-self-end text-end">
                    <div class="d-inline">
                        <h5 class="d-inline me-2">Sortierung:</h5>
                        <HxButton Size="ButtonSize.Small" OnClick="SelectDateSorting" CssClass="d-inline" Color="@(SortingDateSelected == true ? ThemeColor.Warning : ThemeColor.Secondary)">Datum</HxButton>
                        <span class="d-inline">|</span>
                        <HxButton Size="ButtonSize.Small" OnClick="SelectNameSorting" CssClass="d-inline" Color="@(SortingNameSelected == true ? ThemeColor.Warning : ThemeColor.Secondary)">Name</HxButton>
                        <span class="d-inline">|</span>
                        <HxButton Size="ButtonSize.Small" OnClick="SelectHosterSorting" CssClass="d-inline" Color="@(SortingHosterSelected == true ? ThemeColor.Warning : ThemeColor.Secondary)">Hoster</HxButton>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (ShowEmptyDashboardInfo)
    {
        <HxAlert Color="ThemeColor.Info" CssClass="mt-4">
            <HxIcon Icon="@BootstrapIcon.ExclamationCircleFill" />
            Es sieht so aus als hättest du noch keine Serien hinzugefügt! Starte eine Suche und füge deine erste Serie hinzu!
        </HxAlert>
    }
    <div class="row justify-content-center">        
        @if (UserSeries is not null)
        {
            foreach (SeriesModel series in UserSeries)
            {
                <HxCard ImageAlt=""
                        ImageSrc="@series.CoverArtBase64"
                        ImageHeight="330"
                        style="width: 245px;"
                        CssClass="mt-3 mx-2 px-2 rounded glass border-0"
                        HeaderCssClass="bg-transparent border border-0">
                    <HeaderTemplate>
                        @switch (series.StreamingPortal)
                        {
                            case StreamingPortal.AniWorld:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>AniWorld</div>
                                break;
                            case StreamingPortal.STO:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>S.TO</div>
                                break;
                            case StreamingPortal.MegaKino:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>MegaKino</div>
                                break;
                            default:
                                break;
                        }
                    </HeaderTemplate>
                    <BodyTemplate>
                        <HxCardTitle CssClass="text-center">@series.Name</HxCardTitle>
                        <HxCardSubtitle CssClass="mt-2">
                            <HxButton OnClick="@(() => NavigateToDetail(series))" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Primary" Icon="BootstrapIcon.Forward" CssClass="w-100 mt-2">Anzeigen</HxButton>
                            @if (!series.IsSearchResult)
                            {
                                <HxButton OnClick="@(() => RemoveReminder(series.Path))" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Warning" Outline="true" Icon="BootstrapIcon.XCircleFill" CssClass="w-100 mt-2">Entfernen</HxButton>
                            }
                        </HxCardSubtitle>
                    </BodyTemplate>
                </HxCard>
            }
        }
        else
        {
            <div class="d-flex align-items-center justify-content-center text-secondary">
                <HxSpinner Size="SpinnerSize.Regular"></HxSpinner>
                <span class="ps-3 fs-5">Reminder Daten abrufen...</span>
            </div>
        }
    </div>
</div>

@code {
    private bool SortingNameSelected { get; set; } = false;
    private bool SortingHosterSelected { get; set; } = false;
    private bool SortingDateSelected { get; set; } = true;

    private bool SearchSeries { get; set; } = true;
    private bool SearchFilms { get; set; } = true;

    private bool ShowEmptyDashboardInfo { get; set; }

    private List<SeriesModel>? UserSeries { get; set; }

    private bool Loading { get; set; }

    private ReminderModel Reminder = new();

    private string SearchSeriesName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await AuthService.Initialize();

        if (firstRender)
        {
            Loading = true;
            StateHasChanged();
            UserSeries = await ApiService.GetAsync<List<SeriesModel>?>("getAllUserSeries");

            if (UserSeries is not null)
            {
                UserSeries = UserSeries.OrderByDescending(_ => _.Added).ThenByDescending(_ => _.Id).ToList();
            }
            else
            {
                ShowEmptyDashboardInfo = true;
            }

            Loading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RemoveReminder(string seriesPath)
    {
        ToastService.Clear();
        Loading = true;
        StateHasChanged();

        bool deleteSuccess = await ApiService.GetAsync<bool>("removeReminder", new() { { "seriesPath", seriesPath } });

        if (deleteSuccess)
        {
            UserSeries?.RemoveAll(_ => _.Path == seriesPath);
            ToastService.AddMessage("Der Reminder wurde gelöscht!", MessageType.Info);
        }
        else
        {
            ToastService.AddMessage("Beim löschen des Reminders ist ein Fehler aufgetreten und konnte nicht gelöscht werden!", MessageType.Error);
        }

        Loading = false;
        StateHasChanged();
    }

    private void NavigateToDetail(SeriesModel series)
    {
        NavigationManager.NavigateTo(Routes.MediaDetail + $"{series.Path}?referer={Routes.Dashboard}&hoster={series.StreamingPortal}");
    }

    private async Task SearchSeriesDashboard()
    {
        List<SeriesModel> allResults = new();

        if (!string.IsNullOrEmpty(SearchSeriesName))
        {
            allResults.AddRange(UserSeries.Where(_ => _.Name.ToLower().Contains(SearchSeriesName.ToLower())).ToList());
        }

        UserSeries?.Clear();

        if (string.IsNullOrEmpty(SearchSeriesName))
        {
            Loading = true;
            StateHasChanged();

            UserSeries = await ApiService.GetAsync<List<SeriesModel>?>("getAllUserSeries");

            Loading = false;
            StateHasChanged();
            return;
        }

        allResults.AddRange(UserSeries.Where(_ => _.Name.ToLower().Contains(SearchSeriesName.ToLower())).ToList());

        Loading = true;
        StateHasChanged();

        MediaType searchMediaType = ( SearchSeries ? MediaType.Series : MediaType.Undefined ) |
                                    ( SearchFilms ? MediaType.Films : MediaType.Undefined );

        List<SearchResultModel>? apiSearchResults = await ApiService.GetAsync<List<SearchResultModel>?>("getSeries", 
                                                    new() {
                                                        { "seriesName", SearchSeriesName.ToLower() },
                                                        { "mediaType", searchMediaType.ToString() }
                                                    });

        foreach (SearchResultModel searchResult in apiSearchResults)
        {
            SeriesModel series = new()
                {
                    Name = searchResult.Title,
                    CoverArtUrl = searchResult.CoverArtUrl,
                    IsSearchResult = true,
                    Link = searchResult.Link,
                    Path = searchResult.Path,
                    StreamingPortal = searchResult.StreamingPortal,
                    CoverArtBase64 = searchResult.CoverArtBase64
                };

            allResults.Add(series);
        }

        UserSeries = allResults;

        SelectHosterSorting();

        Loading = false;
        StateHasChanged();
    }

    private void SelectNameSorting()
    {
        SortingNameSelected = true;
        SortingHosterSelected = false;
        SortingDateSelected = false;

        UserSeries = UserSeries.OrderBy(_ => _.Name).ToList();

        StateHasChanged();
    }

    private void SelectHosterSorting()
    {
        SortingNameSelected = false;
        SortingHosterSelected = true;
        SortingDateSelected = false;

        UserSeries = UserSeries.OrderBy(_ => _.StreamingPortal).ToList();

        StateHasChanged();
    }

    private void SelectDateSorting()
    {
        SortingNameSelected = false;
        SortingHosterSelected = false;
        SortingDateSelected = true;

        UserSeries = UserSeries.OrderByDescending(_ => _.Added).ThenByDescending(_ => _.Id).ToList();

        StateHasChanged();
    }
}


