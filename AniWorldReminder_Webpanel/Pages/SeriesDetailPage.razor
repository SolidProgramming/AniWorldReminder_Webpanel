@attribute [Route(Routes.SeriesDetail + "/{SeriesSearchName}")]
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject IAuthenticationService AuthService
@inject IHxMessengerService ToastService
@inject IJSRuntime JSRuntime;

<PageTitle>Serie: @SeriesInfo?.Name</PageTitle>

    <div class="container">
        <HxButton Outline="true" Color="ThemeColor.Warning" OnClick="@NavigateBack" Icon="BootstrapIcon.Backspace">Zurück</HxButton>
        @if (ShowInfoError)
    {
        <HxAlert Color="ThemeColor.Danger" CssClass="mt-3">
            <HxIcon Icon="@BootstrapIcon.ExclamationCircleFill" />
            Beim abrufen der Serien Informationen ist ein Fehler aufgetreten! Laden Sie die Seite neu oder versuchen Sie es später erneut.
        </HxAlert>
    }
    else
    {
        <div class="row">
            <div class="col-sm-auto pb-2">
                <HxCard ImageAlt=""
                        ImageSrc="@SeriesInfo?.CoverArtUrl"
                        ImageHeight="330"
                        ImageWidth="220"
                        style="width: 256px;"
                        CssClass="pt-2 mt-4 px-2 rounded"
                        HeaderCssClass="bg-transparent border border-0">
                    <HeaderTemplate>
                        @switch (SeriesInfo?.StreamingPortal)
                        {
                            case StreamingPortal.AniWorld:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>AniWorld</div>
                                break;
                            case StreamingPortal.STO:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>S.TO</div>
                                break;
                            default:
                                break;
                        }
                    </HeaderTemplate>
                    <BodyTemplate>
                        @if (LoadingInfo)
                        {
                            <div class="text-center">
                                <HxSpinner Size="SpinnerSize.Regular"></HxSpinner>
                            </div>
                        }
                        else
                        {
                            <HxCardTitle CssClass="text-center text-decoration-underline">@SeriesInfo?.Name</HxCardTitle>
                            <HxCardText CssClass="text-center">Staffeln: @SeriesInfo?.SeasonCount</HxCardText>
                            <HxCardSubtitle>
                                @if (UserSeries is null && !AddSuccess)
                                {
                                    <HxButton OnClick="@AddReminder" Outline="true" Color="ThemeColor.Success" Icon="BootstrapIcon.PlusCircleFill" Spinner="@Loading" Enabled="@(!Loading)" CssClass="w-100 mt-2">Hinzufügen</HxButton>
                                }
                                else
                                {
                                    <HxButton Color="ThemeColor.Success" Icon="BootstrapIcon.Check" Enabled="false" CssClass="w-100 mt-2">Hinzugefügt</HxButton>
                                    <HxButton OnClick="@RemoveReminder" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Warning" Outline="true" Icon="BootstrapIcon.XCircleFill" CssClass="w-100 mt-2">Entfernen</HxButton>
                                }
                            </HxCardSubtitle>
                        }
                    </BodyTemplate>
                </HxCard>
            </div>
            <div class="col mt-4">
                <div class="text-warning border rounded">
                    @if (LoadingInfo)
                    {
                        <div class="text-center my-2">
                            <HxSpinner CssClass="text-center" Size="SpinnerSize.Regular"></HxSpinner>
                        </div>
                    }
                    else
                    {
                        if (SeriesInfo is not null && !string.IsNullOrWhiteSpace(SeriesInfo.DirectLink))
                        {
                            <p class="p-3 pb-0">@SeriesInfo.Description<a href="@SeriesInfo.DirectLink" class="text-primary d-inline mx-2">mehr anzeigen</a></p>
                        }
                    }
                </div>
                <div class="col-6 mt-4">
                    <div class="px-3 py-2 border rounded">
                        <div class="my-2">
                            <HxIcon CssClass="d-inline fs-5" Icon="BootstrapIcon.Translate"></HxIcon>
                            <h5 class="d-inline px-2">Sprache:</h5>
                        </div>
                        <HxCheckbox TextCssClass="text-warning" Inline="true" @bind-Value="GerDub" Text="Deutsch" />
                        <HxCheckbox TextCssClass="text-warning" Inline="true" @bind-Value="GerSub" CssClass="mt-2" Text="Deutsch Untertitel" />
                        <HxCheckbox TextCssClass="text-warning" Inline="true" @bind-Value="EngDub" CssClass="mt-2" Text="Englisch" />
                        <HxCheckbox TextCssClass="text-warning" Inline="true" @bind-Value="EngSub" CssClass="mt-2" Text="Englisch Untertitel" />
                        @if (ShowLanguageError)
                        {
                            <HxAlert Color="ThemeColor.Danger" CssClass="mt-3">
                                <HxIcon Icon="@BootstrapIcon.ExclamationCircleFill" />
                                Es muss mindestens eine Sprachoption gewählt werden!
                            </HxAlert>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? SeriesSearchName { get; set; }

    private bool GerDub { get; set; }
    private bool GerSub { get; set; }
    private bool EngDub { get; set; }
    private bool EngSub { get; set; }

    private bool LoadingInfo { get; set; }
    private bool Loading { get; set; }

    private SeriesInfoModel? SeriesInfo;
    private SeriesModel? UserSeries;

    private bool AddSuccess { get; set; }

    private bool ShowInfoError { get; set; }
    private bool ShowLanguageError { get; set; }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(SeriesSearchName))
            NavigationManager.NavigateTo("");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ShowInfoError = false;
            LoadingInfo = true;
            StateHasChanged();
            SeriesInfo = await ApiService.GetAsync<SeriesInfoModel?>("getSeriesInfo", new() { { "seriesName", SeriesSearchName! } });

            if (SeriesInfo is null)
            {
                LoadingInfo = false;
                ShowInfoError = true;
                StateHasChanged();
                ToastService.AddError("Fehler", $"Beim abrufen der Serien Informationen ist ein Fehler aufgetreten!");
                return;
            }

            UserSeries = await ApiService.GetAsync<SeriesModel?>("getUserSeries", new() { { "username", AuthService?.User?.Username! }, { "seriesName", SeriesInfo?.Name! } });

            SetLanguages(UserSeries);

            LoadingInfo = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Language GetLanguages()
    {
        Language language = Language.None;

        if (GerDub)
        {
            language |= Language.GerDub;
        }

        if (GerSub)
        {
            language |= Language.GerSub;
        }

        if (EngDub)
        {
            language |= Language.EngDub;
        }

        if (EngSub)
        {
            language |= Language.EngSub;
        }

        if (language == Language.None)
        {
            ShowLanguageError = true;
        }

        return language;
    }

    private void SetLanguages(SeriesModel series)
    {
        GerDub = series.LanguageFlag.HasFlag(Language.GerDub);
        EngSub = series.LanguageFlag.HasFlag(Language.EngSub);
        GerSub = series.LanguageFlag.HasFlag(Language.GerSub);
        EngDub = series.LanguageFlag.HasFlag(Language.EngDub);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(Routes.Search);
    }

    private async Task AddReminder()
    {
        ToastService.Clear();
        ShowLanguageError = false;
        Loading = true;
        StateHasChanged();

        if (string.IsNullOrEmpty(AuthService?.User?.Username))
        {
            Loading = false;
            StateHasChanged();
            return;
        }

        Language language = GetLanguages();

        if (language == Language.None)
        {
            Loading = false;
            StateHasChanged();
            return;
        }

        AddReminderRequestModel addReminderRequest = new()
            {
                Language = language,
                SeriesName = SeriesInfo?.Name,
                Username = AuthService?.User?.Username,
                StreamingPortal = SeriesInfo.StreamingPortal
            };

        bool success = await ApiService.PostAsync<bool>("addReminder", addReminderRequest);

        if (!success)
        {
            ToastService.AddError("Fehler", $"Beim hinzufügen des Reminders für {SeriesInfo?.Name!} ist ein Fehler aufgetreten!");
        }

        AddSuccess = success;

        Loading = false;
        StateHasChanged();
    }

    private async Task RemoveReminder()
    {
        ToastService.Clear();
        Loading = true;
        StateHasChanged();

        bool deleteSuccess = await ApiService.GetAsync<bool>("removeReminder", new() { { "username", AuthService?.User?.Username! }, { "seriesName", SeriesInfo?.Name! } });

        if (deleteSuccess)
        {
            UserSeries = null;
            AddSuccess = false;
        }
        else
        {
            ToastService.AddError("Fehler", $"Beim löschen des Reminders für {SeriesInfo?.Name!} ist ein Fehler aufgetreten und konnte nicht gelöscht werden!");
        }

        Loading = false;
        StateHasChanged();
    }

    private async Task OpenDirectLink()
    {
        await JSRuntime.InvokeAsync<string>("open", SeriesInfo?.DirectLink, "_blank");
    }
}

