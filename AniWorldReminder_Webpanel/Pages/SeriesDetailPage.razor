@attribute [Route(Routes.SeriesDetail + "/{SeriesUrlPath}")]
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject IAuthenticationService AuthService
@inject IHxMessengerService ToastService
@inject IJSRuntime JSRuntime;
@using System.Web;

<PageTitle>Serie: @SeriesInfo?.Name</PageTitle>

<HxModal Size="ModalSize.Regular" @ref="LanguageSelectionModal" Title="Sprache" Centered="true">
    <BodyTemplate>
        <div class="d-flex justify-content-center">
            @foreach (DirectViewLinkModel directViewLink in SelectedEpisodeDirectView.DirectViewLinks)
            {
                @if (directViewLink.Language == Language.GerDub)
                {
                    <a target="_blank" href="@directViewLink.DirectLink">
                        <img style="width: 65px;" class="d-inline mx-2" src="img/german_dub.svg">
                    </a>
                }
                @if (directViewLink.Language == Language.EngDub)
                {
                    <a target="_blank" href="@directViewLink.DirectLink">
                        <img style="width: 65px;" class="d-inline mx-2" src="img/english_dub.svg">
                    </a>
                }
                @if (directViewLink.Language == Language.GerSub)
                {
                    <a target="_blank" href="@directViewLink.DirectLink">
                        <img style="width: 65px;" class="d-inline mx-2" src="img/german_sub.svg">
                    </a>
                }
                @if (directViewLink.Language == Language.EngSub)
                {
                    <a target="_blank" href="@directViewLink.DirectLink">
                        <img style="width: 65px;" class="d-inline mx-2" src="img/english_sub.svg">
                    </a>
                }
            }
        </div>
    </BodyTemplate>
</HxModal>

<div class="container">
    <HxButton Outline="true" Color="ThemeColor.Warning" OnClick="@NavigateBack" Icon="BootstrapIcon.Backspace">Zurück</HxButton>
    @if (ShowInfoError)
    {
        <HxAlert Color="ThemeColor.Danger" CssClass="mt-3">
            <HxIcon Icon="@BootstrapIcon.ExclamationCircleFill" />
            Beim abrufen der Serien Informationen ist ein Fehler aufgetreten! Laden Sie die Seite neu oder versuchen Sie es später erneut.
        </HxAlert>
    }
    else
    {
        <div class="row mt-3">
            <EditForm Model="@Reminder" OnValidSubmit="@(() => Quicksearch())">
                <HxInputText Label="Serien Name" @bind-Value="@QuickSearchSeriesName" Placeholder="Jujutsu Kaisen" />
                <HxSubmit Color="ThemeColor.Primary" CssClass="w-100" Spinner="Loading" Enabled="@(!Loading)">Schnellsuche</HxSubmit>
            </EditForm>
        </div>
        <div class="row mt-2">
            <div class="col-sm-auto pb-2">
                <HxCard ImageAlt=""
                        ImageSrc="@SeriesInfo?.CoverArtBase64"
                        ImageHeight="330"
                        style="width: 256px;"
                        CssClass="mt-3 px-2 rounded"
                        HeaderCssClass="bg-transparent border border-0">
                    <HeaderTemplate>
                        @switch (SeriesInfo?.StreamingPortal)
                        {
                            case StreamingPortal.AniWorld:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>AniWorld</div>
                                break;
                            case StreamingPortal.STO:
                                <div class="text-warning fw-light text-center" style="font-family: 'Roboto', sans-serif;"><HxIcon CssClass="px-2 fs-4 align-middle" Icon="BootstrapIcon.Cloud"></HxIcon>S.TO</div>
                                break;
                            default:
                                break;
                        }
                    </HeaderTemplate>
                    <BodyTemplate>
                        @if (LoadingInfo)
                        {
                            <div class="text-center">
                                <HxSpinner Size="SpinnerSize.Regular"></HxSpinner>
                            </div>
                        }
                        else
                        {
                            <HxCardTitle CssClass="text-center text-decoration-underline">@HttpUtility.HtmlDecode(@SeriesInfo?.Name)</HxCardTitle>
                            <HxCardText CssClass="text-center">Staffeln: @SeriesInfo?.SeasonCount</HxCardText>
                            <HxCardSubtitle>
                                @if (UserSeries is null && !AddSuccess)
                                {
                                    <HxButton OnClick="@AddReminder" Outline="true" Color="ThemeColor.Success" Icon="BootstrapIcon.PlusCircleFill" Spinner="@Loading" Enabled="@(!Loading)" CssClass="w-100 mt-2">Hinzufügen</HxButton>
                                }
                                else
                                {
                                    <HxButton Color="ThemeColor.Success" Icon="BootstrapIcon.Check" Enabled="false" CssClass="w-100 mt-2">Hinzugefügt</HxButton>
                                    <HxButton OnClick="@RemoveReminder" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Warning" Outline="true" Icon="BootstrapIcon.XCircleFill" CssClass="w-100 mt-2">Entfernen</HxButton>
                                }
                            </HxCardSubtitle>
                        }
                    </BodyTemplate>
                </HxCard>
            </div>
            <div class="col mt-3">
                <div class="text-warning border rounded">
                    @if (LoadingInfo)
                    {
                        <div class="text-center my-2">
                            <HxSpinner CssClass="text-center" Size="SpinnerSize.Regular"></HxSpinner>
                        </div>
                    }
                    else
                    {
                        if (SeriesInfo is not null && !string.IsNullOrWhiteSpace(SeriesInfo.DirectLink))
                        {
                            <p class="p-3 pb-0">@SeriesInfo.Description<a target="_blank" href="@SeriesInfo.DirectLink" class="text-primary d-inline mx-2">mehr anzeigen</a></p>
                        }
                    }
                </div>
                <div class="row">
                    <div class="col-6 mt-4">
                        <div class="px-3 py-2 border rounded">
                            <div class="my-2">
                                <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Translate"></HxIcon>
                                <h5 class="d-inline px-2">Sprache:</h5>
                            </div>
                            <HxCheckbox Enabled="@(UserSeries is null)" TextCssClass="text-warning" Inline="true" @bind-Value="GerDub" Text="Deutsch" />
                            <HxCheckbox Enabled="@(UserSeries is null)" TextCssClass="text-warning" Inline="true" @bind-Value="GerSub" CssClass="mt-2" Text="Deutsch Untertitel" />
                            <HxCheckbox Enabled="@(UserSeries is null)" TextCssClass="text-warning" Inline="true" @bind-Value="EngDub" CssClass="mt-2" Text="Englisch" />
                            <HxCheckbox Enabled="@(UserSeries is null)" TextCssClass="text-warning" Inline="true" @bind-Value="EngSub" CssClass="mt-2" Text="Englisch Untertitel" />
                            @if (ShowLanguageError)
                            {
                                <HxAlert Color="ThemeColor.Danger" CssClass="mt-3 mb-2">
                                    <HxIcon Icon="@BootstrapIcon.ExclamationCircleFill" />
                                    Es muss mindestens eine Sprachoption gewählt werden!
                                </HxAlert>
                            }
                        </div>
                    </div>
                    <div class="col-6 mt-4">
                        <div class="px-3 border rounded">
                            <div class="my-2">
                                <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Download"></HxIcon>
                                <h5 class="d-inline px-2">Download:</h5>
                                @if (SeriesInfo is not null)
                                {
                                    @if (UserSeries is not null)
                                    {
                                        <HxCheckboxList ItemTextCssClass="text-warning"
                                                        LabelCssClass="d-flex text-light"
                                                        Inline="true"
                                                        CssClass="mt-3"
                                                        TItem="SeasonModel"
                                                        TValue="int"
                                                        Label="Staffeln"
                                                        Data="@SeriesInfo.Seasons"
                                                        ItemTextSelector="@(season => season.Id.ToString())"
                                                        ItemValueSelector="@(season => season.Id)"
                                                        @bind-Value="SelectedDownloadSeasons" />

                                        <HxButton OnClick="@AddDownloads" Outline="true" Color="ThemeColor.Success" Icon="BootstrapIcon.Download"
                                                  Spinner="@Loading" Enabled="@(!Loading && UserSeries is not null)" CssClass="w-100 mt-4 mb-2">
                                            Hinzufügen
                                        </HxButton>
                                    }
                                    else
                                    {
                                        <HxAlert Color="ThemeColor.Secondary" CssClass="mt-3">
                                            <HxIcon Icon="@BootstrapIcon.ExclamationCircle" />
                                            <span class="ms-2">Füge erst die Serie zu deinen Remindern hinzu!</span>
                                        </HxAlert>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (SeriesInfo is not null)
        {
            <div class="mt-3">
                <HxTabPanel ActiveTabIdChanged="TabChanged" CssClass="mt-3" RenderMode="TabPanelRenderMode.ActiveTabOnly">
                    <div>
                        <HxIcon CssClass="d-inline fs-2 text-warning" Icon="BootstrapIcon.PlayFill"></HxIcon>
                        <h4 class="d-inline px-2">Staffeln:</h4>
                    </div>
                    @foreach (SeasonModel season in SeriesInfo.Seasons)
                    {
                        <HxTab ContentCssClass="mt-2" Title="@season.Id.ToString()" Id="@season.Id.ToString()">
                            <Content>
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th scope="col" class="text-center" width="70px">Folge</th>
                                            <th scope="col" class="text-center" width="70px">Watch</th>
                                            <th scope="col">Titel/Name</th>
                                            <th scope="col">Sprache</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (EpisodeModel episode in season.Episodes)
                                        {
                                            <tr>
                                                <th class="text-secondary text-center" scope="row">@episode.Episode.ToString()</th>
                                                <th class="text-center">
                                                    @if (episode.DirectViewLinks is null)
                                                    {
                                                        <HxSpinner Size="SpinnerSize.Small"></HxSpinner>
                                                    }
                                                    else
                                                    {
                                                        <HxButton OnClick="@(() => OpenLanguageSelectionForEpisode(episode))" Size="ButtonSize.Small" IconCssClass="p-0 m-0" Icon="BootstrapIcon.PlayFill" Color="ThemeColor.Warning"></HxButton>
                                                    }
                                                </th>
                                                <td class="text-primary" style="font-family: 'Roboto', sans-serif;"><b>@HttpUtility.HtmlDecode(episode.Name)</b></td>
                                                <td><LanguageFlagsComponent Languages="@episode.Languages"></LanguageFlagsComponent></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </Content>
                        </HxTab>
                    }
                </HxTabPanel>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public string? SeriesUrlPath { get; set; }

    [SupplyParameterFromQuery(Name = "referer")]
    [Parameter]
    public string? Referer { get; set; }

    private HxModal? LanguageSelectionModal;

    private string? QuickSearchSeriesName { get; set; }

    private ReminderModel Reminder = new();

    private bool GerDub { get; set; }
    private bool GerSub { get; set; }
    private bool EngDub { get; set; }
    private bool EngSub { get; set; }

    private bool LoadingInfo { get; set; }
    private bool Loading { get; set; }
    private bool LoadingEpisodes { get; set; }
    private SeriesInfoModel? SeriesInfo;
    private SeriesModel? UserSeries;

    private bool AddSuccess { get; set; }

    private bool ShowInfoError { get; set; }
    private bool ShowLanguageError { get; set; }

    private EpisodeModel? SelectedEpisodeDirectView;

    private List<int> SelectedDownloadSeasons { get; set; } = new();

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(SeriesUrlPath))
            NavigationManager.NavigateTo("");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ShowInfoError = false;
            LoadingInfo = true;
            StateHasChanged();
            SeriesInfo = await ApiService.GetAsync<SeriesInfoModel?>("getSeriesInfo", new() { { "seriesPath", SeriesUrlPath! } });

            if (SeriesInfo is null)
            {
                LoadingInfo = false;
                ShowInfoError = true;
                StateHasChanged();
                ToastService.AddMessage("Beim abrufen der Serien Informationen ist ein Fehler aufgetreten!", MessageType.Error);
                return;
            }

            UserSeries = await ApiService.GetAsync<SeriesModel?>("getUserSeries", new() { { "seriesPath", SeriesUrlPath! } });

            if (UserSeries is not null)
            {
                SetLanguages(UserSeries);
            }

            LoadingInfo = false;
            StateHasChanged();
        }


        await base.OnAfterRenderAsync(firstRender);
    }

    private void Quicksearch()
    {
        if (string.IsNullOrWhiteSpace(QuickSearchSeriesName))
            return;

        NavigationManager.NavigateTo($"{Routes.Search}/{QuickSearchSeriesName}");
    }

    private Language GetLanguages()
    {
        Language language = Language.None;

        if (GerDub)
        {
            language |= Language.GerDub;
        }

        if (GerSub)
        {
            language |= Language.GerSub;
        }

        if (EngDub)
        {
            language |= Language.EngDub;
        }

        if (EngSub)
        {
            language |= Language.EngSub;
        }

        if (language == Language.None)
        {
            ShowLanguageError = true;
        }

        return language;
    }

    private void SetLanguages(SeriesModel series)
    {
        GerDub = series.LanguageFlag.HasFlag(Language.GerDub);
        EngSub = series.LanguageFlag.HasFlag(Language.EngSub);
        GerSub = series.LanguageFlag.HasFlag(Language.GerSub);
        EngDub = series.LanguageFlag.HasFlag(Language.EngDub);
    }

    private void NavigateBack()
    {
        if (string.IsNullOrEmpty(Referer))
        {
            NavigationManager.NavigateTo(Routes.Search);
            return;
        }

        NavigationManager.NavigateTo(Referer);
    }

    private async Task AddReminder()
    {
        ToastService.Clear();
        ShowLanguageError = false;
        Loading = true;
        StateHasChanged();

        if (string.IsNullOrEmpty(AuthService?.User?.Username))
        {
            Loading = false;
            StateHasChanged();
            return;
        }

        Language language = GetLanguages();

        if (language == Language.None)
        {
            Loading = false;
            StateHasChanged();
            return;
        }

        AddReminderRequestModel addReminderRequest = new()
            {
                Language = language,
                SeriesPath = SeriesInfo.Path,
                StreamingPortal = SeriesInfo.StreamingPortal
            };

        bool success = await ApiService.PostAsync<bool>("addReminder", addReminderRequest);

        if (!success)
        {
            ToastService.AddMessage($"Beim hinzufügen des Reminders für {SeriesInfo?.Name!} ist ein Fehler aufgetreten!", MessageType.Error);
        }

        AddSuccess = success;

        UserSeries = await ApiService.GetAsync<SeriesModel?>("getUserSeries", new() { { "seriesPath", SeriesInfo.Path } });

        Loading = false;
        StateHasChanged();
    }

    private async Task AddDownloads()
    {
        if (!SelectedDownloadSeasons.Any() || SeriesInfo is null || UserSeries is null)
            return;

        ToastService.Clear();
        Loading = true;
        StateHasChanged();

        IEnumerable<Language>? flagsReminder = UserSeries.LanguageFlag.GetFlags<Language>(ignore: Language.None);
        IEnumerable<EpisodeModel> selectedEpisodes = SeriesInfo.Seasons.SelectMany(_ => _.Episodes.Where(x => SelectedDownloadSeasons.Contains(x.Season)));

        List<EpisodeModel> episodes = [];

        foreach (EpisodeModel episode in selectedEpisodes)
        {
            IEnumerable<Language>? flagsEpisode = episode.Languages.GetFlags<Language>(ignore: Language.None);

            if (flagsEpisode.Any(_ => flagsReminder.Contains(_)))
            {
                IEnumerable<Language>? wantedLanguages = flagsEpisode.Intersect(flagsReminder);

                episodes.Add(episode);
            }
        }

        AddDownloadsRequestModel addDownloadRequest = new()
            {
                SeriesId = UserSeries.Id.ToString(),
                Episodes = episodes
            };

        int addedDownloads = await ApiService.PostAsync<int>("addDownloads", addDownloadRequest);

        if (addedDownloads > 0)
        {
            ToastService.AddMessage($"Es wurden {addedDownloads} Episoden zu den Downloads hinzugefügt!", MessageType.Success);

            int existingDownloads = episodes.Count - addedDownloads;

            if (existingDownloads > 0)
            {
                ToastService.AddMessage($"{existingDownloads} Episoden sind bereits in der Warteschlange.", MessageType.Secondary);
            }
        }
        else
        {
            ToastService.AddMessage($"Es sind bereits alle verfügbaren Episoden für {SeriesInfo?.Name!} in der Warteschlange!", MessageType.Secondary);
        }

        Loading = false;
        StateHasChanged();
    }

    private async Task RemoveReminder()
    {
        ToastService.Clear();
        Loading = true;
        StateHasChanged();

        bool deleteSuccess = await ApiService.GetAsync<bool>("removeReminder", new() { { "username", AuthService?.User?.Username! }, { "seriesPath", SeriesInfo.Path } });

        if (deleteSuccess)
        {
            UserSeries = null;
            AddSuccess = false;
        }
        else
        {
            ToastService.AddMessage($"Beim löschen des Reminders für {SeriesInfo?.Name!} ist ein Fehler aufgetreten und konnte nicht gelöscht werden!", MessageType.Error);
        }

        Loading = false;
        StateHasChanged();
    }

    private async Task OpenDirectLink()
    {
        await JSRuntime.InvokeAsync<string>("open", SeriesInfo?.DirectLink, "_blank");
    }

    private async Task OpenEpisodeDirectLink(string episodeUrl)
    {
        await JSRuntime.InvokeAsync<string>("open", episodeUrl, "_blank");
    }

    private async Task OpenLanguageSelectionForEpisode(EpisodeModel episode)
    {
        SelectedEpisodeDirectView = episode;
        await LanguageSelectionModal.ShowAsync();
    }

    private async Task TabChanged(string tabId)
    {
        SeasonModel? season = SeriesInfo!.Seasons.First(_ => _.Id.ToString() == tabId);
        SeasonModel? updatedSeason = await ApiService.GetAsync<SeasonModel?>("getSeasonEpisodesLinks", new() { { "seriesPath", SeriesUrlPath! }, { "streamingPortal", SeriesInfo!.StreamingPortal.ToString() } }, season);

        if (updatedSeason is not null)
        {
            SeriesInfo.Seasons.RemoveAll(_ => _.Id.ToString() == tabId);
            SeriesInfo.Seasons.Add(updatedSeason);
            SeriesInfo.Seasons = SeriesInfo.Seasons.OrderBy(_ => _.Id).ToList();
            StateHasChanged();
        }
    }
}

