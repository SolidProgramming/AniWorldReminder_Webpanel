@attribute [Route(Routes.SeriesDetail + "/{SeriesSearchName}")]
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject IAuthenticationService AuthService

<PageTitle>Serie: @SeriesInfo?.Name</PageTitle>

    <HxButton Outline="true" Color="ThemeColor.Warning" OnClick="@NavigateBack" Icon="BootstrapIcon.Backspace">Zurück</HxButton>

    <div class="row">
        <div class="col col-3">
            <HxCard ImageAlt=""
                    ImageSrc="@SeriesInfo?.CoverArtUrl"
                    ImageHeight="330"
                    ImageWidth="220"
                    style="width: 256px;"
                    CssClass="pt-2 mt-4 px-2 rounded ">
                <BodyTemplate>
                    @if (LoadingInfo)
                {
                    <div class="text-center">
                        <HxSpinner Size="SpinnerSize.Regular"></HxSpinner>
                    </div>
                }
                else
                {
                    <HxCardTitle CssClass="text-center text-decoration-underline">@SeriesInfo?.Name</HxCardTitle>
                    <HxCardText CssClass="text-center">Staffeln: @SeriesInfo?.SeasonCount</HxCardText>
                    <HxCardSubtitle>
                        @if (UserSeries is null && !AddSuccess)
                        {
                            <HxButton OnClick="@AddReminder" Outline="true" Color="ThemeColor.Success" Icon="BootstrapIcon.PlusCircleFill" Spinner="@Loading" Enabled="@(!Loading)" CssClass="w-100 mt-2">Hinzufügen</HxButton>
                        }
                        else
                        {
                            <HxButton Color="ThemeColor.Success" Icon="BootstrapIcon.Check" Enabled="false" CssClass="w-100 mt-2">Hinzugefügt</HxButton>
                            <HxButton OnClick="@RemoveReminder" Spinner="@Loading" Enabled="@(!Loading)" Color="ThemeColor.Warning" Outline="true" Icon="BootstrapIcon.XCircleFill" CssClass="w-100 mt-2">Entfernen</HxButton>
                        }
                    </HxCardSubtitle>
                }
            </BodyTemplate>
        </HxCard>
    </div>
</div>

@code {
    [Parameter]
    public string? SeriesSearchName { get; set; }

    private bool LoadingInfo { get; set; }
    private bool Loading { get; set; }

    private SeriesInfoModel? SeriesInfo;
    private SeriesModel? UserSeries;

    private bool LangGerDub { get; set; }
    private bool LangGerSub { get; set; }
    private bool LangEngDub { get; set; }
    private bool LangEngSub { get; set; }

    private bool AddSuccess { get; set; }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(SeriesSearchName))
            NavigationManager.NavigateTo("");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Loading = true;
            StateHasChanged();
            SeriesInfo = await ApiService.GetAsync<SeriesInfoModel?>("getSeriesInfo", new() { { "seriesName", SeriesSearchName! } });
            UserSeries = await ApiService.GetAsync<SeriesModel?>("getUserSeries", new() { { "username", AuthService?.User?.Username! }, { "seriesName", SeriesInfo?.Name! } });
            Loading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private List<string> GetLanguages()
    {
        List<string> languages = new();

        if (LangGerDub)
        {
            languages.Add("GerDub");
        }

        if (LangGerSub)
        {
            languages.Add("GerSub");
        }

        if (LangEngDub)
        {
            languages.Add("EngDub");
        }

        if (LangEngSub)
        {
            languages.Add("EngSub");
        }

        return languages;
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(Routes.Search);
    }

    private async Task AddReminder()
    {
        Loading = true;
        StateHasChanged();

        if (string.IsNullOrEmpty(AuthService?.User?.Username))
        {
            Loading = false;
            StateHasChanged();
            return;
        }

        AddReminderRequestModel addReminderRequest = new()
            {
                SeriesName = SeriesInfo?.Name,
                Username = AuthService?.User?.Username
            };

        bool success = await ApiService.PostAsync<bool>("addReminder", addReminderRequest);

        AddSuccess = success;

        Loading = false;
        StateHasChanged();
    }

    private async Task RemoveReminder()
    {
        Loading = true;
        StateHasChanged();

        bool deleteSuccess = await ApiService.GetAsync<bool>("removeReminder", new() { { "username", AuthService?.User?.Username! }, { "seriesName", SeriesInfo?.Name! } });

        if (deleteSuccess)
        {
            UserSeries = null;
            AddSuccess = false;
        }
        
        Loading = false;
        StateHasChanged();
    }
}

