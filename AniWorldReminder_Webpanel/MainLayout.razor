@inherits LayoutComponentBase
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@inject IHxMessengerService ToastService

<div class="d-md-flex min-vh-100">   
        @if (LoggedIn)
        {
            <AuthorizedNavComponent></AuthorizedNavComponent>
        }
        else
        {
            <UnauthorizedNavComponent InProgress="@InProgress"></UnauthorizedNavComponent>
        }    
    <HxMessenger CssClass="mx-3 my-3" Position="ToastContainerPosition.BottomEnd" />
    <div class="main px-4 flex-grow-1 overflow-hidden">
        <div class="d-none d-md-block pt-4"></div>
        <div class="d-block d-md-none pt-2"></div>
        @Body
    </div>
</div>
@code {

    private bool InProgress { get; set; }
    private bool LoggedIn { get; set; }

    protected override Task OnInitializedAsync()
    {
        NavManager.LocationChanged += OnNavManagerLocationChanged;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckLogin();

            if (NavManager.Uri.Contains(Routes.Index) && LoggedIn)
            {
                NavManager.NavigateTo(Routes.Dashboard);
            }
            
        }
    }

    private async void OnNavManagerLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        ToastService.Clear();
        await CheckLogin();
    }

    private async Task CheckLogin()
    {
        if (NavManager.Uri.Contains(Routes.Verify))
            return;

        InProgress = true;
        StateHasChanged();
        await AuthService.Initialize();

        InProgress = false;
        if (AuthService.User is null || string.IsNullOrEmpty(AuthService.User.Username))
        {
            LoggedIn = false;
        }
        else
        {
            LoggedIn = true;
        }

        StateHasChanged();
    }
}