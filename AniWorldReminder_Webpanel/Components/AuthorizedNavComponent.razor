@inject IAuthenticationService AuthService
@inject IApiService ApiService

<HxSidebar CssClass="ps-2 pt-3">
    <HeaderTemplate>
        <div class="userWrap d-inline-block text-center">
            <img class="user-image" src="img/favicon.jpeg" alt="user profile picture" title="user profile picture">
            <span class="d-inline-block"></span>
            <h6 class="d-inline-block">@Username</h6>
        </div>
    </HeaderTemplate>
    <ItemsTemplate>
        <HxSidebarItem Icon="BootstrapIcon.Person" Href="@Routes.Dashboard">
            <ContentTemplate>
                Profil
            </ContentTemplate>
        </HxSidebarItem>
        <HxSidebarItem Icon="BootstrapIcon.BoxSeam" Href="@Routes.CreateDownloader">
            <ContentTemplate>
                Downloader
            </ContentTemplate>
        </HxSidebarItem>
        <HxSidebarItem Icon="BootstrapIcon.DatabaseAdd" Href="@Routes.ThirdPartyApps" CssClass="pt-2 text-warning">
            <ContentTemplate>
                Apps
            </ContentTemplate>
        </HxSidebarItem>
        <HxSidebarItem Icon="BootstrapIcon.Columns" Href="@Routes.Dashboard" CssClass="mt-4">
            <ContentTemplate>
                Dashboard
                @if (UserSeries is not null && UserSeries.Any())
                {
                    <HxBadge Color="ThemeColor.Secondary" CssClass="ms-2">
                        @UserSeries.Count
                    </HxBadge>
                }
                else
                {
                    <HxSpinner CssClass="ms-2" Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                }
            </ContentTemplate>
        </HxSidebarItem>
        <HxSidebarItem Icon="BootstrapIcon.Download" Href="@Routes.Downloads">
            <ContentTemplate>
                Downloads:
                @if (UserSeries is not null && UserSeries.Any())
                {
                    <HxBadge Color="ThemeColor.Warning" CssClass="ms-2 text-dark">
                        @DownloadCount
                    </HxBadge>
                }
                else
                {
                    <HxSpinner CssClass="ms-2" Color="ThemeColor.Warning" Size="SpinnerSize.Small"></HxSpinner>
                }
            </ContentTemplate>
        </HxSidebarItem>
        <HxSidebarItem Icon="BootstrapIcon.BoxArrowLeft" CssClass="mt-4 text-danger" Href="@Routes.Logout">
            <ContentTemplate>
                Ausloggen
            </ContentTemplate>
        </HxSidebarItem>
        <HxSidebarItem Icon="BootstrapIcon.Gear" Href="@Routes.Settings" CssClass="border-top pt-2 text-warning">
            <ContentTemplate>
                Einstellungen
            </ContentTemplate>
        </HxSidebarItem>
    </ItemsTemplate>
</HxSidebar>

@code {
    private string? Username { get; set; }

    private List<SeriesModel>? UserSeries;
    private int DownloadCount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshData();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RefreshData()
    {
        UserSeries = await ApiService.GetAsync<List<SeriesModel>?>("getAllUserSeries", new() { { "username", AuthService?.User?.Username! } });

        DownloadCountModel? downloadsCount = await ApiService.GetAsyncWithUserApiKey<DownloadCountModel>("getDownloadsCount");

        if (downloadsCount is null)
        {
            DownloadCount = 0;
        }
        else
        {
            DownloadCount = downloadsCount.DownloadsCount;
        }

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Username = AuthService?.User?.Username;
        StateHasChanged();

        base.OnInitialized();
    }
}